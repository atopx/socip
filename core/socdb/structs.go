package socdb

import (
	"bytes"
	"io"
	"net"
)

type dataMapKey string

type dataMapValue struct {
	data DataType
	// This exists to reduce allocations by interning the key.
	key dataMapKey
}

// dataMap is used to deduplicate data inserted into the tree to reduce
// memory usage using keys generated by keyWriter.
type dataMap struct {
	data      map[dataMapKey]dataMapValue
	keyWriter *keyWriter
}

type keyWriter struct {
	*bytes.Buffer
}

type writtenType struct {
	pointer Pointer
	size    int64
}

type dataWriter struct {
	*bytes.Buffer
	dataMap   *dataMap
	pointers  map[string]writtenType
	keyWriter *keyWriter
}

type stackValue struct {
	value   DataType
	curSize int
}

type deserializer struct {
	stack      []*stackValue
	rv         DataType
	key        *String
	lastOffset uintptr
	cache      map[uintptr]DataType
}

type recordType byte

type record struct {
	node       *node
	valueKey   dataMapKey
	recordType recordType
}

// each node contains two records.
type node struct {
	children [2]record
	nodeNum  int
}

type insertRecord struct {
	ip           net.IP
	prefixLen    int
	recordType   recordType
	inserter     func(value DataType) (DataType, error)
	insertedNode *node

	dataMap *dataMap
}

// Options holds configuration parameters for the writer
type Options struct {

	// BuildEpoch is the database build timestamp as a Unix epoch value. It
	// defaults to the epoch of when New was called.
	BuildEpoch int64

	// DatabaseType is a string that indicates the structure of each data record
	// associated with an IP address. The actual definition of these structures
	// is left up to the database creator.
	DatabaseType string

	// Description is a map where the key is a language code and the value is
	// the description of the database in that language.
	Description map[string]string

	// DisableIPv4Aliasing will disable the IPv4 aliasing in IPv6 trees. This
	// aliasing maps some IPv6 networks to the IPv4 network, e.g.,
	// ::ffff:0:0/96.
	DisableIPv4Aliasing bool

	// IncludeReservedNetworks will allow reserved networks to be added to the
	// database.
	//
	// If this is false, any attempt to insert into these networks will result
	// in an error and inserting a network that contains a reserved network will
	// result in the reserved portion of the network being excluded. Reserved
	// networks that are globally routable to an individual device, such as
	// Teredo, may still be added.
	IncludeReservedNetworks bool

	// IPVersion indicates whether an IPv4 or IPv6 database should be built. An
	// IPv6 database supports both IPv4 and IPv6 lookups. The default value is
	// "6" for IPv6.
	IPVersion int

	// Languages is a slice of strings, each of which is a locale code. A given
	// record may contain data items that have been localized to some or all of
	// these locales. Records should not contain localized data for locales not
	// included in this slice.
	Languages []string

	// RecordSize indicates the number of bits in a record in the search tree.
	// The supported values are 24, 28, and 32. A smaller size will result in a
	// smaller database, but it will limit the maximum size of the database.
	// The default is 28.
	RecordSize int
}

// Tree represents an MaxMind DB search tree.
type Tree struct {
	buildEpoch   int64
	databaseType string
	dataMap      *dataMap
	description  map[string]string
	ipVersion    int
	languages    []string
	recordSize   int
	root         *node
	treeDepth    int
	// This is set when the tree is finalized
	nodeCount int
}

type typeNum byte

type writer interface {
	io.Writer
	WriteByte(byte) error
	WriteString(string) (int, error)
	WriteOrWritePointer(DataType) (int64, error)
}

// DataType represents a MaxMind DB data type
type DataType interface {
	Copy() DataType
	size() int
	typeNum() typeNum
	WriteTo(writer) (int64, error)
}
